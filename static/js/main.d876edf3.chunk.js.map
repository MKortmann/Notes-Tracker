{"version":3,"sources":["components/Button.js","components/Modal.js","components/Navbar.js","components/Input.js","components/Item.js","App.js","serviceWorker.js","index.js"],"names":["MyButton","styled","Button","background","border","borderRadius","boxShadow","color","height","padding","marginTop","button","props","Fragment","onClick","clicked","variant","style","endIcon","Icon","listItemClicked","icon","label","useStyles","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","shadows","spacing","TransitionsModal","classes","React","useState","open","setOpen","handleClose","showInputs","TextField","id","placeholder","fullWidth","margin","InputLabelProps","shrink","Typography","type","fontSize","cursor","Modal","aria-labelledby","aria-describedby","className","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","title","description","buttonLabel","root","flexGrow","menuButton","marginRight","ButtonAppBar","AppBar","position","Toolbar","IconButton","edge","aria-label","container","flexWrap","textField","marginLeft","width","Input","onChange","value","Todo","newStyleBackground","styleBackground","todo","InputTodo","addTodo","inputValue","setInputValue","console","log","submit","e","preventDefault","Grid","item","xs","onSubmit","target","Item","arraySubItems","subItems","setSubItems","useEffect","newSubItem","name","length","showSubItems","setShowSubItems","arrowDesign","bind","map","index","key","clickedSubItem","text","addSubItem","selectedItem","App","state","selectedList","inputListValue","inputItemValue","addItem","items","push","subitems","setState","addList","subitem","saveItem","saveList","itemRemove","splice","subItemRemove","itemId","subItemId","setActiveList","lastIdValue","parseInt","slice","forEach","i","newString","substring","number","buttonsListToBeRender","this","formToAddItemsToBeRender","itemsToBeRender","direction","justify","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d876edf3.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\n// <Button variant=\"outlined\" size=\"small\" color=\"primary\" fullWidth endIcon={< CloudUploadIcon />} >\r\n//   Submit\r\n// </Button>\r\n\r\nconst MyButton = styled(Button)({\r\n  background: 'rgba(0,212,255,0.5)',\r\n  border: 0,\r\n  borderRadius: 3,\r\n  boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n  color: 'white',\r\n  height: 36,\r\n  padding: '0 30px',\r\n  \"&:hover\": {\r\n    background: \"rgba(255, 105, 135, .5)\",\r\n  },\r\n  marginTop: \"5px\"\r\n});\r\n\r\n\r\n\r\nfunction button (props) {\r\n  return (\r\n    <React.Fragment>\r\n      <MyButton onClick={props.clicked} variant=\"contained\" color=\"default\" style={{background: props.color}}  endIcon={<Icon onClick={props.listItemClicked}>{props.icon}</Icon>} >\r\n        {props.label}\r\n      </MyButton>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default button;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from \"./Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid rgba(0,212,255,0.5)',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function TransitionsModal(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  let showInputs = null;\r\n  if (props.showInputs) {\r\n    showInputs = (\r\n      <div>\r\n        <TextField\r\n          id=\"standard-full-width\"\r\n          label={\"Email address\"}\r\n          placeholder={\"Add Your Email Address\"}\r\n          fullWidth\r\n          margin=\"normal\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        />\r\n        <TextField\r\n          id=\"standard-full-width\"\r\n          label={\"Your Password\"}\r\n          placeholder={\"Add Your Password\"}\r\n          fullWidth\r\n          margin=\"normal\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Typography type=\"button\" style={{margin: \"20px\", fontSize: \"20px\", cursor: \"pointer\"}} onClick={handleOpen}>\r\n        {props.label}\r\n      </Typography>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n              <h2 id=\"transition-modal-title\">{props.title}</h2>\r\n              <p id=\"transition-modal-description\">{props.description}</p>\r\n              {showInputs}\r\n              <Button clicked={handleClose} label={props.buttonLabel}></Button>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"./Modal\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    background: 'rgba(0,212,255,0.5)',\r\n    color: \"black\"\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\" className={classes.root}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            Notes Tracker\r\n          </Typography>\r\n          <Modal showInputs={false} label={\"Account\"} title={\"Account\"} description={\"Manage Your Account\"} buttonLabel={\"close\"}></Modal>\r\n          <Modal showInputs={false} label={\"LogOut\"} title={\"LogOut\"} description={\"\"} buttonLabel={\"LogOut\"}></Modal>\r\n          <Modal showInputs={true} label={\"LogIn\"} title={\"LogIn\"} description={\"\"} buttonLabel={\"LogIn\"}></Modal>\r\n          <Modal showInputs={true} label={\"SignUp\"} title={\"SignUp\"} description={\"\"} buttonLabel={\"SignUp\"}></Modal>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n  display: 'flex',\r\n  flexWrap: 'wrap',\r\n  margin: \"15px\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200\r\n  },\r\n\r\n}));\r\n\r\nexport default function Input(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <TextField\r\n        onChange={props.onChange}\r\n        id=\"standard-full-width\"\r\n        label={props.label}\r\n        style={{ margin: 8 }}\r\n        placeholder={props.label}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n        value={props.value}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n// import Fab from '@material-ui/core/Fab';\r\n// import AddIcon from '@material-ui/icons/Add';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\n/* IN THIS CASE TO IMPROVE THE READABILITY I ADDING THREE COMPONENTS IN THIS FILE\r\nWE HAVE THREE COMPONENTS:\r\n1) Todo (stateless component): only return the subitems that are the Todos\r\n2) InputTodo (statefull component): here we have state, by each keyboard pressed key, it add the\r\nvalue to the inputValue. This value is passed to the COMPONENT ITEMS than passed\r\nto the container in APP.js\r\n3) ITEM (statefull component): Encloses the component Todo and InputTodo\r\n*/\r\n\r\n// COMPONENT TODO THAT RETURNS THE TODO=SUBITEM\r\n// using direct destructuring in the func argument.\r\nfunction Todo(props) {\r\n\r\n let newStyleBackground = (props.styleBackground === \"white\" ) ? '#E8A9B1' : \"white\"\r\n\r\n  return (\r\n    <div style={{background: newStyleBackground, margin: \"8px\"}}>\r\n      <Typography>{props.todo}</Typography>\r\n    </div>\r\n  )\r\n}\r\n\r\n// COMPONENT INPUT THAT ALLOWS US TO ADD TODOS\r\nfunction InputTodo({addTodo}) {\r\n  // THE VALUE WILL BE FILLED WITH THE KEYBOARD INPUT\r\n  // SETTED ON THE RETURN VALUE\r\n  const  [inputValue, setInputValue] = useState(\"\");\r\n  console.log(`the inputValue is: ${inputValue}`);\r\n  const submit = e => {\r\n    e.preventDefault();\r\n    if(!inputValue) return;\r\n    addTodo(inputValue);\r\n    setInputValue(\"\");\r\n  }\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={6}>\r\n        <form onSubmit={submit}>\r\n          <TextField\r\n            id=\"standard-full-width\"\r\n            onChange={e => setInputValue(e.target.value)}\r\n            label={\"Add Your SubItem\"}\r\n            style={{ margin: 8 }}\r\n            placeholder={\"Add Your SubItem\"}\r\n            fullWidth\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            value={inputValue}\r\n          />\r\n        </form>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Icon onClick={submit} style={{cursor: \"pointer\", fontSize: 40}} color=\"secondary\" aria-label=\"add\">add_circle</Icon>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\n// MAIN COMPONENT!\r\nconst Item = (props) => {\r\n\r\n  // we load the data always from the container at App.js\r\n  // the data loaded is stored in subItems\r\n  const [subItems, setSubItems] = useState([...props.arraySubItems]);\r\n\r\n  const addTodo = text => {\r\n    const newSubItem = [...props.arraySubItems, text];\r\n    setSubItems(newSubItem);\r\n    // add the new SUBITEM to the specific ITEM in the container at APP.js!\r\n    props.addSubItem(text, props.selectedItem);\r\n    console.log(props.arraySubItems);\r\n  }\r\n\r\n  // THE USE EFFECT WILL BE TRIGERRED ONLY IF YOU CHANGE THE SELECTED LIST:\r\n  // THIS MEANS ONLY IF YOU SELECTED THE SPECIFIC BUTTON SETTED THROUGH:\r\n  // [props.label.name]\r\n  useEffect( () => {\r\n    console.log(`USE EFFECT TRIGGERED`);\r\n    const newSubItem = [...props.arraySubItems];\r\n    setSubItems(newSubItem);\r\n  }, [props.label.name])\r\n\r\n  // ONLY RE-RENDER IF THE NUMBER OF SUBITEMS CHANGED: used to delete subitems and\r\n  // rerender it!!!\r\n  useEffect( () => {\r\n    console.log(`USE EFFECT TRIGGERED`);\r\n    const newSubItem = [...props.arraySubItems];\r\n    setSubItems(newSubItem);\r\n  }, [props.arraySubItems.length])\r\n\r\n  // we load the data always from the container at App.js\r\n  // the data loaded is stored in subItems\r\n  const [showSubItems, setShowSubItems] = useState(false);\r\n\r\n  let arrowDesign = showSubItems ? \"keyboard_arrow_up\" : \"keyboard_arrow_down\";\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={6}>\r\n        <Typography style={{fontSize: \"25px\"}}>{props.label.name}</Typography>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <Icon onClick={e => setShowSubItems(!showSubItems)} style={{cursor: \"pointer\", fontSize: \"40px\"}}>{arrowDesign}</Icon>\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <DeleteOutlinedIcon onClick={props.clicked.bind(this, props.id)} style={{cursor: \"pointer\", fontSize: \"40px\"}} id={props.id}/>\r\n      </Grid>\r\n      {showSubItems ?\r\n        <React.Fragment>\r\n        {subItems.map((todo, index) => (\r\n          <Grid container key={index}>\r\n              <Grid item xs={10}>\r\n                <Todo\r\n                  index={index}\r\n                  todo={todo}\r\n                  styleBackground={props.styleBackground}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <DeleteOutlinedIcon onClick={props.clickedSubItem.bind(this, index)} style={{cursor: \"pointer\"}}/>\r\n              </Grid>\r\n          </Grid>\r\n        ))}\r\n        <InputTodo addTodo={addTodo}/>\r\n        </React.Fragment>\r\n    : null }\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Item;\r\n","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Input from \"./components/Input\";\nimport Button from \"./components/Button\";\nimport Item from \"./components/Item\";\nimport 'typeface-roboto';\n\n\nclass App extends Component {\n// container: we have here a container that store all the list + items and the respective subitems\n// selectedList and SelectedItem: help to track which list and item we have seletected!\n// inputListValue and inputItemValue get the input of the keyboard to store the value in the container\n  state = {\n    container:\n      [ // TREE CONTAINER STORE\n        // {\n        // id: \"item1\", items: [\n                              // {\n                                    // id: \"subitem1\", items: []\n                              // }\n                            // ]\n        // }\n      ],\n    selectedList: 0,\n    inputListValue: \"\",\n    inputItemValue: \"\"\n  }\n\n// ADD:  add a new ITEM to the items array in the respectived selectedList\n  addItem = (e) => {\n    e.preventDefault();\n    const container = [...this.state.container];\n    container[this.state.selectedList].items.push({name: this.state.inputItemValue, subitems: []});\n    this.setState({\n      container: container,\n      inputItemValue: \"\"\n    })\n  }\n// ADD: a new LIST to the container!\n  addList = (e) => {\n    e.preventDefault();\n    const container = [...this.state.container];\n    const id = container.length + 1;\n    container.push( {id: `${this.state.inputListValue}-${id}`, items: [  ] } );\n    this.setState({\n      container: container,\n      inputListValue: \"\"\n    })\n  }\n  // ADD the SUBITEM to the items array\n  addSubItem = (subitem, selectedItem) => {\n    const container = [...this.state.container];\n    container[this.state.selectedList].items[selectedItem].subitems.push(subitem);\n    this.setState({\n      container: container,\n      inputItemValue: \"\"\n    })\n  }\n// To save item name at each keyboard input at the state\n  saveItem = (e) => {\n    this.setState({inputItemValue: e.target.value});\n  }\n// To save list name at each keyboard input at the state\n  saveList = (e) => {\n    this.setState({inputListValue: e.target.value});\n  }\n  // REMOVE ITEMS\n  itemRemove = (id) => {\n    debugger\n    let container = [...this.state.container];\n    container[this.state.selectedList].items.splice(id, 1);\n    this.setState({\n      container: container\n    })\n  }\n  // REMOVE SUBITEMS\n  subItemRemove = (itemId, subItemId) => {\n    let container = [...this.state.container];\n    container[this.state.selectedList].items[itemId].subitems.splice(subItemId, 1);\n    this.setState({\n      container: container\n    })\n  }\n  // SET THE ACTIVE LIST TO BE DISPLAYED\n  setActiveList = (id) => {\n    // we will get here the last value of the string that correspond to the id number\n    // used to select the active item in the items.\n    const lastIdValue = parseInt(id.slice(-1))-1;\n    this.setState({\n      selectedList: lastIdValue\n    })\n  }\n\n  // DELETE the LIST\n  listItemClicked = (id) => {\n    const container = [...this.state.container];\n    // here we check for the exactly name that is the key(id)\n    container.forEach( (i, index) => {\n      if(i.id === id) {\n        container.splice(index, 1);\n      }\n    })\n    // AFTER DELETING A LIST WE HAVE TO REORDERING IT\n    container.forEach( (id, index) => {\n      const newString = id.id.substring(0, id.id.length -1);\n      const number = index + 1;\n      id.id = newString + number;\n    })\n    this.setState({\n      container: container,\n    })\n  }\n\n  render () {\n\n  // RENDER THE LIST OF BUTTONS\n  const buttonsListToBeRender =  (\n      this.state.container.map((i, index) => {\n        if(this.state.selectedList === index) {\n          return (\n            <Button\n              key={i.id}\n              label={i.id}\n              clicked={this.setActiveList.bind(this, i.id)}\n              icon={\"delete\"}\n              listItemClicked={this.listItemClicked.bind(this, i.id)}\n              color={\"red\"}\n\n              />\n          )\n        } else {\n          return (\n            <Button\n              key={i.id}\n              label={i.id}\n              clicked={this.setActiveList.bind(this, i.id)}\n              icon={\"delete\"}\n              listItemClicked={this.listItemClicked.bind(this, i.id)}\n              />\n          )\n        }\n      })\n    )\n\n  // FORM THAT WILL ALLOW US TO ADD ITEMS\n  let formToAddItemsToBeRender = null;\n  if (this.state.container.length !== 0) {\n    formToAddItemsToBeRender = (\n        <React.Fragment>\n          {buttonsListToBeRender}\n          <Grid container alignItems=\"center\">\n            <Grid item xs={6}>\n              <form onSubmit={this.addItem}>\n                <Input label={\"Please, add your item\"} onChange={this.saveItem} value={this.state.inputItemValue}/>\n              </form>\n            </Grid>\n            <Grid item xs={6}>\n              <Button label={\"Submit\"} color={\"#00474F\"} clicked={this.addItem} icon={\"send\"}/>\n            </Grid>\n          </Grid>\n        </React.Fragment>\n    )\n  }\n  // RENDER THE LIST OF ITEMS\n  let itemsToBeRender = null;\n  // render only if the list has items\n  if (this.state.container[this.state.selectedList]) {\n  itemsToBeRender =  (\n      this.state.container[this.state.selectedList].items.map((i, index) => {\n        let styleBackground = null;\n        styleBackground = (index%2 === 0 ) ? 'rgba(0,212,255,0.5)' : \"white\"\n        // styleBackground = (index%2 === 0 ) ? 'rgba(0,212,255,0.5)' : \"white\"\n        return (\n          <div key={index}  style={{background: styleBackground}}>\n          <Item label={i} selectedItem={index}\n            arraySubItems={this.state.container[this.state.selectedList].items[index].subitems}\n            addSubItem={this.addSubItem} clickedSubItem={this.subItemRemove.bind(this, index)}\n            styleBackground={styleBackground}\n            clicked={this.itemRemove.bind(this, index)}\n            id={index}/>\n\n          </div>\n        )\n      })\n    )\n  }\n\n    return (\n      <div className=\"App\">\n        <Grid className=\"App\" container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <Navbar />\n          <Grid item xs={6}>\n            <form onSubmit={this.addList}>\n              <Input label={\"Please, add your list name\"} onChange={this.saveList} value={this.state.inputListValue}/>\n            </form>\n          </Grid>\n          <Grid item xs={6}>\n            <Button label={\"Add List\"} color={\"#00474F\"} clicked={this.addList} icon={\"add\"} />\n          </Grid>\n          <Grid item xs={12}>\n          {formToAddItemsToBeRender}\n          </Grid>\n          <Grid item xs={12}>\n          {itemsToBeRender}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}